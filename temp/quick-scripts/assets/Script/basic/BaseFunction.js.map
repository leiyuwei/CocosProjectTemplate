{"version":3,"sources":["BaseFunction.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\basic","sourcesContent":["import { Fn } from \"./Types\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\"\r\nimport * as R from \"ramda\";\r\nimport { Maybe } from \"./Maybe\";\r\nimport ShaderComponent from \"../extension/shader/ShaderComponent\";\r\nimport { ShaderType } from \"../extension/shader/ShaderManager\";\r\n\r\nexport function modify<T>(subject: BehaviorSubject<T>, func: Fn<T, T>) {\r\n    subject.next(func(subject.getValue()))\r\n}\r\n\r\nexport function eventToBehavior<T>(\r\n    node: cc.Node, \r\n    eventType: string, \r\n    resultSelector: Fn<cc.Event.EventCustom, T>,\r\n    initial: T\r\n): BehaviorSubject<T> {\r\n    let behavior = new BehaviorSubject(initial);\r\n    let handler = (e: cc.Event.EventCustom) => {\r\n        behavior.next(resultSelector(e));\r\n    }\r\n    node.on(eventType, handler);\r\n    return behavior;\r\n}\r\n\r\nexport function eventToObservable<T>(\r\n    node: cc.Node, \r\n    eventType: string, \r\n    resultSelector?: Fn<cc.Event.EventCustom, T>,\r\n): Observable<T> {\r\n    return new Observable<T>(subscriber => {\r\n        let handler = (e: cc.Event.EventCustom) => {\r\n            if (resultSelector == undefined) {\r\n                subscriber.next(null);\r\n            } else {\r\n                subscriber.next(resultSelector(e));\r\n            }\r\n        }\r\n        node.on(eventType, handler);\r\n        subscriber.add(() => node.off(eventType, handler));\r\n    });\r\n}\r\n\r\n/**\r\n * Create flexibly-numbered lists of integers.\r\n * `range(5); // -> [0, 1, 2, 3, 4]`\r\n * `range(0, 5, 2); // -> [0, 2, 4]`\r\n */\r\nexport function range(start: number, end?: number, step?: number): number[] {\r\n    if (end == null) {\r\n        end = start || 0;\r\n        start = 0;\r\n    }\r\n\r\n    if (!step) step = end < start ? -1 : 1;\r\n\r\n    let len = Math.max(Math.ceil((end - start) / step), 0);\r\n    let ret = Array(len);\r\n\r\n    for (let i = 0; i < len; i++, start += step) ret[i] = start;\r\n    return ret;\r\n}\r\n\r\n/**\r\n * Produces a random number between min and max(inclusive).\r\n * `random(1, 5); // -> an integer between 0 and 5`\r\n * `random(5); // -> an integer between 0 and 5`\r\n * `random(1.2, 5.2, true); /// -> a floating-point number between 1.2 and 5.2`\r\n */\r\nexport function random(min: number, max?: number, floating?: boolean): number {\r\n    if (max == null) {\r\n        max = min;\r\n        min = 0;\r\n    }\r\n    let rand = Math.random();\r\n    if (floating || min % 1 || max % 1) {\r\n        return Math.min(\r\n            min +\r\n                rand *\r\n                (max - min + parseFloat('1e-' + ((rand + '').length - 1))),\r\n            max\r\n        )\r\n    } else {\r\n        return min + Math.floor(rand * (max - min + 1));\r\n    }\r\n}\r\n\r\n/**\r\n * 将数组长度设置为n\r\n * `fixLength([1, 2, 3], 2); // [Just 1, Just 2]`\r\n * `fixLength([1], 2); // [Just 1, Nothing]`\r\n */\r\nexport function fixLength<T>(arr: Array<T>, n: number): Array<Maybe<T>> {\r\n    let result = R.take(n, arr).map(Maybe.Just);\r\n    return R.concat(result, R.repeat(Maybe.Nothing<T>(), n - result.length));\r\n}\r\n\r\n\r\nexport function ifNullThen<T>(val: T, defaultVal: T): T {\r\n    if (val == undefined) {\r\n        return defaultVal;\r\n    } else {\r\n        return val;\r\n    }\r\n}\r\n\r\n\r\nexport function count<T>(val: T, arr: T[]): number {\r\n    return R.filter(R.equals(val), arr).length;\r\n}\r\n\r\n\r\n// time info \r\nexport type TimeInfo = {\r\n    year: number,\r\n    month: number,\r\n    day: number,\r\n    hour: number,\r\n    minute: number,\r\n    seconds: number,\r\n}\r\nexport function timeInfo(timestamp: number): TimeInfo {\r\n    let date = new Date(timestamp);\r\n    return {\r\n        year: date.getFullYear(),\r\n        month: date.getMonth() + 1,\r\n        day: date.getDate(),\r\n        hour: date.getHours(),\r\n        minute: date.getMinutes(),\r\n        seconds: date.getSeconds()\r\n    }\r\n}\r\n\r\n/**\r\n * example: \r\n * formatNum(1, 2); // '02'\r\n * formatNum(12, 4); // '0012'\r\n * @param num 要格式化的数字\r\n * @param length 格式化后的长度\r\n */\r\nexport function formatNum(num: number, length: number): string {\r\n    let str = String(num);\r\n    return R.repeat(\"0\", length - str.length) + str;\r\n}\r\n\r\n/**\r\n * 移除节点\r\n * @param node '要移除的节点\r\n */\r\nexport function safeRemove(node: cc.Node):void {\r\n    if (node && node.parent) {\r\n        node.parent.removeChild(node);\r\n        node.destroy();\r\n    }\r\n}\r\n\r\n/**\r\n * wait for `n` seconds\r\n */\r\n export function wait(seconds: number) {\r\n     return new Promise<void>(function(resolve) {\r\n         setTimeout(resolve, seconds * 1000);\r\n     })\r\n }\r\n\r\n/**\r\n* 灰度化一张图片 By ShaderComponent\r\n* @param sprite 图片\r\n*/\r\nexport function grey(node: cc.Node) {\r\n    if (!node) {\r\n        return;\r\n    }\r\n    let shader = node.getComponent(ShaderComponent);\r\n    if (shader) {\r\n        shader.shader = ShaderType.Gray;\r\n    }\r\n}\r\n\r\n/**\r\n * 取消灰度化\r\n * @param sprite 图片\r\n */\r\nexport function ungrey(node: cc.Node) {\r\n    if (!node) {\r\n        return;\r\n    }\r\n    let shader = node.getComponent(ShaderComponent);\r\n    if (shader) {\r\n        shader.shader = ShaderType.Default;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * 从数组中随机抽选一个元素\r\n */\r\nexport function randomOne<T>(arr: Array<T>): Maybe<T> {\r\n    if (arr == undefined || arr.length == 0) {\r\n        return Maybe.Nothing();\r\n    }\r\n    let randIndex = Math.floor(Math.random() * arr.length);\r\n    return Maybe.Just(arr[randIndex]);\r\n}\r\n\r\n\r\n/**\r\n * 将数组的元素随机重新排列\r\n */\r\nexport function shuffle<T>(arr: Array<T>): Array<T> {\r\n    let array = R.clone(arr);\r\n    let length = array.length;\r\n    for (let i = length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\n/**\r\n * sample 从数组中抽取出指定数量的元素\r\n */\r\nexport function sample<T>(n: number, arr: Array<T>): Array<T> {\r\n    n = Math.max(Math.min(n, arr.length), 0);\r\n    return R.take(n, shuffle(arr));\r\n}\r\n"]}