{"version":3,"sources":["Array.ts"],"names":[],"mappings":";;;;;AAAA,iCAAgC;AAChC,yBAA0B;AAG1B;;;;;;GAMG;AACH,gBAA0B,GAAa,EAAE,CAAI,EAAE,KAAa;IACxD,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,OAAO,GAAG,CAAC;AACf,CAAC;AAHD,wBAGC;AAED;;;;GAIG;AACH,gBAA0B,GAAa,EAAE,CAAI;IACzC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACZ,OAAO,GAAG,CAAC;AACf,CAAC;AAHD,wBAGC;AAED;;;GAGG;AACH,aAAuB,GAAa;IAChC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;IAClB,OAAO;QACH,KAAK,EAAE,IAAI,aAAK,CAAC,CAAC,CAAC;QACnB,MAAM,EAAE,GAAG;KACd,CAAA;AACL,CAAC;AAND,kBAMC;AAED;;;GAGG;AACH,eAAyB,GAAa;IAClC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;IACpB,OAAO;QACH,KAAK,EAAE,IAAI,aAAK,CAAC,CAAC,CAAC;QACnB,MAAM,EAAE,GAAG;KACd,CAAA;AACL,CAAC;AAND,sBAMC;AAGD;;;;;GAKG;AACH,eAAyB,GAAa,EAAE,IAAY,EAAE,MAAc;IAChE,IAAI,CAAC,MAAM,IAAI,MAAM,GAAG,CAAC,EAAE;QACvB,OAAO,GAAG,CAAC;KACd;IACD,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACzB,OAAO,GAAG,CAAC;AACf,CAAC;AAND,sBAMC;AAED;;;;;GAKG;AACH,cAAwB,GAAa,EAAE,MAAc,EAAE,MAAc;IACjE,iBAAiB,KAAa;QAC1B,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC;IAC5C,CAAC;IACD,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,IAAI,MAAM,EAAE;QACxD,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QACvB,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;KACtB;SAAM;QACH,OAAO,GAAG,CAAC;KACd;AACL,CAAC;AAXD,oBAWC;AAED,YAAY;AAEZ;;GAEG;AACH,iBAA2B,KAAe;;IACtC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC1B,KAAK,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACjC,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9C,yBAA2C,EAA1C,gBAAQ,EAAE,gBAAQ,CAAyB;KAC/C;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAPD,0BAOC;AAGD;;GAEG;AACH,gBAA0B,CAAS,EAAE,GAAa;IAC9C,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC;AAHD,wBAGC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\basic","sourcesContent":["import { Maybe } from \"./Maybe\";\r\nimport * as R from \"ramda\"\r\nimport { random } from \"./Utils\";\r\n\r\n/**\r\n * 在指定位置数组尾部放入一个的新的元素，并返回修改后的数组\r\n * 内部是用`splice`实现\r\n * @param arr 原数组\r\n * @param v 新插入的元素\r\n * @param index 插入的位置\r\n */\r\nexport function insert<T>(arr: Array<T>, v: T, index: number): Array<T> {\r\n    arr.splice(index, 0, v);\r\n    return arr;\r\n}\r\n\r\n/**\r\n * 在数组末尾插入一个元素，并返回该数组\r\n * @param arr 原数组\r\n * @param v 查入的元素\r\n */\r\nexport function append<T>(arr: Array<T>, v: T): Array<T> {\r\n    arr.push(v);\r\n    return arr;\r\n}\r\n\r\n/**\r\n * 从数组末尾尝试弹出一个元素，如果为空数组，则value为Nothing\r\n * @param arr 原数组\r\n */\r\nexport function pop<T>(arr: Array<T>): {value: Maybe<T>, result: Array<T>} {\r\n    let v = arr.pop();\r\n    return {\r\n        value: new Maybe(v),\r\n        result: arr\r\n    }\r\n}\r\n\r\n/**\r\n * 从数组开头尝试弹出一个元素，如果为空数组，则value为Nothing\r\n * @param arr 原数组\r\n */\r\nexport function shift<T>(arr: Array<T>): {value: Maybe<T>, result: Array<T>} {\r\n    let v = arr.shift();\r\n    return {\r\n        value: new Maybe(v),\r\n        result: arr\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 从指定位置`from`删除长度为`amount`的元素，并返回该数组\r\n * @param arr 原数组\r\n * @param from 开始的Index\r\n * @param amount 要删除的长度\r\n */\r\nexport function erase<T>(arr: Array<T>, from: number, amount: number): Array<T> {\r\n    if (!amount || amount < 0) {\r\n        return arr;\r\n    }\r\n    arr.splice(from, amount);\r\n    return arr;\r\n}\r\n\r\n/**\r\n * 交换指定位置的数组元素\r\n * @param arr 原数组\r\n * @param index1 位置1\r\n * @param index2 位置2\r\n */\r\nexport function swap<T>(arr: Array<T>, index1: number, index2: number): Array<T> {\r\n    function isValid(index: number) {\r\n        return index >= 0 && index < arr.length;\r\n    }\r\n    if (isValid(index1) && isValid(index2) && index1 != index2) {\r\n        let temp = arr[index1];\r\n        arr[index1] = arr[index2];\r\n        arr[index2] = temp; \r\n    } else {\r\n        return arr;\r\n    }\r\n}\r\n\r\n// function \r\n\r\n/**\r\n * 将数组的元素随机重新排列\r\n */\r\nexport function shuffle<T>(array: Array<T>): Array<T> {\r\n    let length = array.length;\r\n    for (let i = length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\n\r\n/**\r\n * sample 从数组中抽取出指定数量的元素\r\n */\r\nexport function sample<T>(n: number, arr: Array<T>): Array<T> {\r\n    n = Math.max(Math.min(n, arr.length), 0);\r\n    return R.take(n, shuffle(R.clone(arr)));\r\n}"]}