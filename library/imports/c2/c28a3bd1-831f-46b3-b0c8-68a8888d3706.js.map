{"version":3,"sources":["../../../../../assets/Script/basic/assets/Script/basic/Types.ts"],"names":[],"mappings":";;;;;;AAEa,QAAA,IAAI,GAAG,aAAa,CAAA;AASjC,gBAA6B,QAAW,EAAE,KAAwB;IAC9D,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC;AAC9C,CAAC;AAFD,wBAEC;AAED,oBAA8B,QAAW;IACrC,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAI,EAAC,CAAC;AAC7C,CAAC;AAFD,gCAEC;AAEY,QAAA,IAAI,GAAG,MAAM,CAAC;AACd,QAAA,QAAQ,GAAG,UAAU,CAAC;AAWnC,gBAA+B,GAAO,EAAE,GAAO;IAC3C,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;AACjC,CAAC;AAFD,wBAEC","file":"","sourceRoot":"../../../../../assets/Script/basic","sourcesContent":["// () in Haskell, Unit in Purescript\nexport type Unit = \"Symbol_Unit\"\nexport const unit = \"Symbol_Unit\"\n\n// 类型构建器\nexport type Type<T, U> = {typeName: T, value: U};\nexport type TypeUnit<T> = Type<T, Unit>\n\nexport type Effect<T> = () => T;\n\n\nexport function Action<T, U>(typeName: T, value?: Exclude<U, Unit>): Type<T, Exclude<U, Unit>> {\n    return {typeName: typeName, value: value};\n}\n\nexport function ActionUnit<T>(typeName: T): Type<T, Unit> {\n    return {typeName: typeName, value: unit};\n}\n\nexport const Cons = Action;\nexport const ConsUnit = ActionUnit;\n\n\n// 函数类型\nexport type Fn<F1, F2> =  (_: F1) => F2\nexport type Fn2<F1, F2, F3> =  (_1: F1, _2: F2) => F3\nexport type Fn3<F1, F2, F3, F4> =  (_1: F1, _2: F2, _3: F3) => F4\nexport type Fn4<F1, F2, F3, F4, F5> =  (_1: F1, _2: F2, _3: F3, _4: F4) => F5\nexport type Fn5<F1, F2, F3, F4, F5, F6> =  (_1: F1, _2: F2, _3: F3, _4: F4, _5: F5) => F6\n\nexport type Pair<F1, F2> = { fst: F1, snd: F2 };\nexport function mkPair<F1, F2>(fst: F1, snd: F2): Pair<F1, F2> {\n    return { fst: fst, snd: snd }\n}"]}